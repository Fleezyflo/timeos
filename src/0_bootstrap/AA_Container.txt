/**
 * MOH TIME OS v2.0 - GLOBAL CONSTANTS
 *
 * Core system constants organized by access frequency for optimal performance.
 * These values are used throughout the system and are frozen for immutability.
 */
class DependencyContainer {
  constructor() {
    this.services = new Map();
    this.factories = new Map();
    this.lazyFactories = new Map();
    this.singletons = new Map();
    this.dependencies = new Map();
    this.initOrder = [];
    this.initTimes = {};
    this.initErrors = new Map();
    this.circularCheck = new Set();
    this.destroyed = false;
    this.criticalServices = new Set(['SmartLogger', 'ConfigManager', 'ErrorHandler']);
    this.registrationSessions = [];
    this.currentSession = null;
    this.validatedServices = new Set();
    this.validationMode = 'FULL';
  }
  // ... (rest of the methods for DependencyContainer) ...
}

// Global container instance
const container = new DependencyContainer();

// Core system constants (most frequently accessed)
const CONSTANTS = Object.freeze({
  // System identification
  VERSION: 'MOH_TIME_OS_v2.0',
  NAMESPACE: 'MTO',
  SCHEMA_VERSION: '2.0',

  // Timezone and locale
  TIMEZONE: 'Asia/Dubai',
  LOCALE: 'en-US',

  // Cache configuration (hot path)
  CACHE_DURATION: 300000,        // 5 minutes default
  HOT_CACHE_SIZE: 100,           // In-memory cache items
  PERSISTENT_CACHE_TTL: 3600000, // 1 hour
  CACHE_COMPRESSION_THRESHOLD: 1024, // 1KB

  // Performance and retry settings
  MAX_RETRIES: 3,
  BASE_RETRY_DELAY: 1000,        // 1 second
  MAX_RETRY_DELAY: 10000,        // 10 seconds
  DEFAULT_TIMEOUT: 30000,        // 30 seconds

  // Circuit breaker configuration
  CIRCUIT_BREAKER_THRESHOLD: 5,
  CIRCUIT_BREAKER_TIMEOUT_MS: 300000, // 5 minutes
  CIRCUIT_BREAKER_HALF_OPEN_LIMIT: 3,

  // Batch operations
  DEFAULT_BATCH_SIZE: 50,
  MAX_BATCH_SIZE: 500,
  MIN_BATCH_SIZE: 1,

  // Scoring and scheduling
  SCORE_THRESHOLD: 0.5,
  MAX_SCORE: 200,
  MIN_SCORE: 0,
  DEFAULT_ESTIMATED_MINUTES: 30,
  MAX_ESTIMATED_MINUTES: 480,    // 8 hours

  // System limits
  MAX_ERROR_HISTORY: 100,
  MAX_LOG_BUFFER_SIZE: 10,
  LOG_FLUSH_INTERVAL: 5000,      // 5 seconds
  AUTO_SAVE_INTERVAL: 30000,     // 30 seconds

  // Date and time
  MILLISECONDS_PER_MINUTE: 60000,
  MILLISECONDS_PER_HOUR: 3600000,
  MILLISECONDS_PER_DAY: 86400000,

  // Archive settings
  DEFAULT_ARCHIVE_DAYS: 90,
  MAX_ARCHIVE_DAYS: 365,
  MIN_ARCHIVE_DAYS: 30,

  // Email processing
  EMAIL_BATCH_SIZE: 20,
  MAX_EMAIL_CONTENT_LENGTH: 5000,
  EMAIL_CONFIDENCE_THRESHOLD: 0.7,

  // Human state
  HUMAN_STATE_TTL: 3600000,      // 1 hour
  ENERGY_ADJUSTMENT_FACTOR: 0.2,
  FOCUS_ADJUSTMENT_FACTOR: 0.3,

  // API rate limits
  SHEETS_API_CALLS_PER_MINUTE: 300,
  GMAIL_API_CALLS_PER_MINUTE: 250,
  CALENDAR_API_CALLS_PER_MINUTE: 200,

  // NLP stop words for email keyword extraction
  STOP_WORDS: ['from', 'with', 'that', 'this', 'there', 'which', 'would',
               'should', 'could', 'about', 'your', 'subject', 'please',
               'thank', 'regards']
});

// Sheet names (validated on access)
const SHEET_NAMES = Object.freeze({
  // Primary operational sheets
  ACTIONS: 'ACTIONS',
  PROPOSED_TASKS: 'PROPOSED_TASKS',
  CALENDAR_PROJECTION: 'CALENDAR_PROJECTION',

  // Configuration and settings
  FOUNDATION_BLOCKS: 'FOUNDATION_BLOCKS',
  APPSHEET_CONFIG: 'APPSHEET_CONFIG',
  HUMAN_STATE: 'HUMAN_STATE',

  // Logging and monitoring
  ACTIVITY: 'ACTIVITY',
  STATUS: 'STATUS',

  // Archive sheets (auto-created)
  ACTIONS_ARCHIVE: 'ACTIONS_ARCHIVE',
  PROPOSED_ARCHIVE: 'PROPOSED_ARCHIVE',
  ACTIVITY_ARCHIVE: 'ACTIVITY_ARCHIVE',

  // Dependencies and relationships
  DEPENDENCIES: 'Dependencies',

  // Temporary sheets (for atomic operations)
  ACTIONS_TEMP: 'ACTIONS_TEMP',
  PROPOSED_TEMP: 'PROPOSED_TEMP',
  CALENDAR_TEMP: 'CALENDAR_TEMP',

  // Additional operational sheets
  TIME_BLOCKS: 'TIME_BLOCKS',
  LANES: 'LANES',
  SENDER_REPUTATION: 'SENDER_REPUTATION',
  CHAT_QUEUE: 'CHAT_QUEUE'
});

// Service identifiers for type safety and circuit breakers
const SERVICES = Object.freeze({
  // Core infrastructure
  PersistentStore: 'PersistentStore',
  CrossExecutionCache: 'CrossExecutionCache',
  ErrorHandler: 'ErrorHandler',
  SmartLogger: 'SmartLogger',
  ConfigManager: 'ConfigManager',
  BatchOperations: 'BatchOperations',
  DistributedLockManager: 'DistributedLockManager',

  // Application services
  IntelligentScheduler: 'IntelligentScheduler',
  EmailIngestionEngine: 'EmailIngestionEngine',
  ChatEngine: 'ChatEngine',
  CalendarSyncManager: 'CalendarSyncManager',
  FoundationBlocksManager: 'FoundationBlocksManager',
  HumanStateManager: 'HumanStateManager',
  SenderReputationManager: 'SenderReputationManager',
  ArchiveManager: 'ArchiveManager',
  DynamicLaneManager: 'DynamicLaneManager',
  SystemManager: 'SystemManager',

  // Web and external interfaces
  WebAppManager: 'WebAppManager',
  AppSheetBridge: 'AppSheetBridge',
  TriggerOrchestrator: 'TriggerOrchestrator',
  SecureWebAppAuth: 'SecureWebAppAuth',
  ZeroTrustTriageEngine: 'ZeroTrustTriageEngine',

  // Business Logic Services
  BusinessLogicValidation: 'BusinessLogicValidation',
  AuditProtocol: 'AuditProtocol',

  // Testing and development services
  MockService: 'MockService',
  TestSeeder: 'TestSeeder',
  MockBatchOperations: 'MockBatchOperations',

  // External services (for circuit breakers)
  EXTERNAL_CALENDAR: 'calendar',
  EXTERNAL_GMAIL: 'gmail',
  EXTERNAL_SHEETS: 'sheets',
  EXTERNAL_DRIVE: 'drive'
});

/**
 * MOH TIME OS v2.0 - GLOBAL ENUMS
 */
const STATUS = Object.freeze({
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED',
  SCHEDULED: 'SCHEDULED',
  PENDING: 'PENDING',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  BLOCKED: 'BLOCKED',
  DEFERRED: 'DEFERRED',
  ARCHIVED: 'ARCHIVED'
});
const PRIORITY = Object.freeze({
  CRITICAL: 'CRITICAL',
  URGENT: 'URGENT',
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW',
  MINIMAL: 'MINIMAL'
});
// ... (all other enums from AC_Enums.gs) ...

class CrossExecutionCache {
  constructor(persistentStore) {
    this.persistentStore = persistentStore;
    this.memoryCache = new Map();
    this.weakCache = new WeakMap();
    this.maxMemoryItems = 100;
    this.defaultTTL = 300000;
    this.stats = { memoryHits: 0, persistentHits: 0, misses: 0, evictions: 0, memorySize: 0, totalOperations: 0 };
    this.accessOrder = new Map();
    this.accessCounter = 0;
    this.sizes = new Map();
  }
  // ... (rest of the methods for CrossExecutionCache) ...
}

class SmartLogger {
  constructor(cache) {
    if (!cache) { throw new Error('SmartLogger: cache parameter is required'); }
    this.cache = cache;
    this.batchedLogs = [];
    this.maxBatchSize = 50;
    this.suppressionWindow = 30;
    this.logLevels = { DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3 };
    this.currentLogLevel = this.logLevels.INFO;
  }
  // ... (rest of the methods for SmartLogger) ...
}

class ErrorHandler {
  constructor(logger) {
    if (!logger) { throw new Error('ErrorHandler: logger parameter is required'); }
    this.logger = logger;
    this.circuitBreakers = new Map();
    this.retryConfigs = new Map();
    this.defaultCircuitConfig = { failureThreshold: 5, recoveryTimeout: 30000, monitoringPeriod: 60000, halfOpenMaxCalls: 3 };
    this.defaultRetryConfig = { maxAttempts: 3, baseDelayMs: 100, maxDelayMs: 1000, jitterFactor: 0.1 };
  }
  // ... (rest of the methods for ErrorHandler) ...
}

class DistributedLockManager {
  constructor(persistentStore, logger) {
    this.persistentStore = persistentStore;
    this.logger = logger || console;
    this.lockPrefix = 'dlock_';
    this.staleLockThreshold = 5 * 60 * 1000;
    this.metrics = { acquireAttempts: 0, acquireSuccesses: 0, acquireFailures: 0, releases: 0, staleLocksCleanedUp: 0, contentionEvents: 0 };
  }
  // ... (rest of the methods for DistributedLockManager) ...
}



class HardenedConfigManager {
  constructor(cache, persistentStore, batchOperations, logger) {
    this.cache = cache;
    this.persistentStore = persistentStore;
    this.batchOperations = batchOperations;
    this.logger = logger;
    this.configInitialized = false;
    this.isUsingDefaults = false;
    this.testConfigOverrides = null;
  }
  // ... (rest of the methods for HardenedConfigManager) ...
}

function ensureServicesRegistered() {
  try {
    if (!container.has('PersistentStore') || !container.has('SmartLogger')) {
      if (typeof registerAllServices === 'function') {
        registerAllServices();
        Logger.log('[Container] Services registered via ensureServicesRegistered');
        return true;
      } else {
        Logger.log('[Container] registerAllServices not yet available');
        return false;
      }
    }
    return true;
  } catch (error) {
    Logger.log('[Container] Error in ensureServicesRegistered: ' + error.toString());
    return false;
  }
}

function getService(name) {
  return container.get(name);
}

function hasService(name) {
  return container.has(name);
}

function getContainerStatus() {
  return container.getInitializationReport();
}

function clearContainer() {
  container.clear();
}

function registerAllServices() {
  Logger.log('[ServiceRegistration] Starting FULL service registration...');
  container.beginRegistrationSession('FULL_SYSTEM_REGISTRATION', 'FULL');
  // ... (rest of registerAllServices) ...
  container.endRegistrationSession();
}
